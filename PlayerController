using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerController : MonoBehaviour
{
    [SerializeField] Transform playerCamera = null;
    [SerializeField] float mouseSensitivity = 3.5f;
    public float walkSpeed = 6;
    [SerializeField] float gravity = -13;
    public float jumpSpeed = 6;
    [SerializeField] [Range(0, 0.5f)] float moveSmoothTime = 0.3f;
    [SerializeField] [Range(0, 0.5f)] float mouseSmoothTime = 0.03f; //smooth times to smooth player movement and camera

    [SerializeField] bool lockCursor = true;

    [SerializeField] GameObject pauseMenu;
    bool paused = false;

    public bool inDialogue = false;

    bool running = false;

    float cameraPitch = 0;
    float velocityY = 0;
    CharacterController controller;

    Vector2 currentDir = Vector2.zero;
    Vector2 currentDirVelocity = Vector2.zero;

    Vector2 currentMouseDelta = Vector2.zero;
    Vector2 currentMouseDeltaVelocity = Vector2.zero;

    void Start()
    {
        controller = GetComponent<CharacterController>();
        if (lockCursor)
        {
            Cursor.lockState = CursorLockMode.Locked;
            Cursor.visible = false;
        }
    }

    void Update()
    {
        UpdateMouseLook();
        UpdateMovement();

        //opens pause menu and closes
        if (Input.GetKeyDown(KeyCode.Escape) && !paused)
        {
            Time.timeScale = 0;
            paused = true;
            pauseMenu.SetActive(true);
            Cursor.lockState = CursorLockMode.None;
            Cursor.visible = true;
        }
        else if (Input.GetKeyDown(KeyCode.Escape) && paused)
        {
            Unpause();
        }

        //allows player to sprint
        if (Input.GetKeyDown(KeyCode.LeftAlt) && running == false)
        {
            running = true;
            walkSpeed = 8;
        }
        else if (Input.GetKeyDown(KeyCode.LeftAlt) && running == true)
        {
            running = false;
            walkSpeed = 6;
        }

        //player is unable to move during dialogue
        if (inDialogue == true)
        {
            walkSpeed = 0;
        }
    }

    void UpdateMouseLook()
    {
        Vector2 targetMouseDelta = new Vector2(Input.GetAxis("Mouse X"), Input.GetAxis("Mouse Y"));

        currentMouseDelta = Vector2.SmoothDamp(currentMouseDelta, targetMouseDelta, ref currentMouseDeltaVelocity, mouseSmoothTime);

        cameraPitch -= currentMouseDelta.y * mouseSensitivity;
        cameraPitch = Mathf.Clamp(cameraPitch, -90, 90); //stops the player from being able to look behind themselves when looking up or down, clamps the camera to a certain area for the player.

        playerCamera.localEulerAngles = Vector3.right * cameraPitch;

        transform.Rotate(Vector3.up * currentMouseDelta.x * mouseSensitivity);
    }

    void UpdateMovement()
    {
        Vector2 targetDir = new Vector2(Input.GetAxisRaw("Horizontal"), Input.GetAxisRaw("Vertical"));
        targetDir.Normalize();

        currentDir = Vector2.SmoothDamp(currentDir, targetDir, ref currentDirVelocity, moveSmoothTime);

        if (controller.isGrounded)
        {
            velocityY = 0;

            if (Input.GetKeyDown(KeyCode.Space))
            {
                velocityY = jumpSpeed;
            }
        }
        velocityY += gravity * Time.deltaTime;

        Vector3 velocity = (transform.forward * currentDir.y + transform.right * currentDir.x) * walkSpeed + Vector3.up * velocityY;

        controller.Move(velocity * Time.deltaTime);

        if (Input.GetAxisRaw("Horizontal") == 0 && Input.GetAxisRaw("Vertical") == 0)
        {
            running = false; //player is no longer sprinting once their character fully stops
            walkSpeed = 6;
        }
    }

    public void Unpause()
    {
        Time.timeScale = 1;
        paused = false;
        pauseMenu.SetActive(false);
        Cursor.lockState = CursorLockMode.Locked;
        Cursor.visible = false;
    }
}
